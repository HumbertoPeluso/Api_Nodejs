{"version":3,"file":"/home/humberto/Documents/Superprof/Moises/Web/Project/src/backend/controllers/authController.ts","sources":["/home/humberto/Documents/Superprof/Moises/Web/Project/src/backend/controllers/authController.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iEAAmE;AACnE,iCAAoC;AACpC,uCAA2B;AAC3B,8DAA+B;AAE/B,SAAgB,iBAAiB;IAAjC,iBAkCC;IAjCG,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,UAAU,CAAC;IACrC,IAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;IAC5C,IAAM,cAAc,GAAG,kCAAiB,EAAE,CAAC;IAC3C,IAAM,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;IAEhC,IAAM,iBAAiB,GAAG;QACtB,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE;QAC3B,QAAQ,EAAE,GAAG,CAAC,MAAM,EAAE;KACzB,CAAC;IAEF,8CAA8C;IAC9C,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAC,GAAG,EAAE,GAAG;QAC3B,CAAC;;;;;wBACS,WAAW,GAAG,GAAG,CAAC,IAAI,CAAC;wBACvB,MAAM,GAAG,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,iBAAiB,CAAC,CAAC;6BACzD,MAAM,CAAC,KAAK,EAAZ,wBAAY;wBACX,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;;4BAET,qBAAM,cAAc,CAAC,OAAO,CAAC,WAAW,CAAC,EAAA;;wBAAjD,KAAK,GAAG,SAAyC;wBACvD,IAAG,KAAK,KAAG,SAAS,EAAC;4BACjB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;yBAC1B;6BAAI;4BACD,IAAG,WAAW,KAAG,SAAS,EAAC;gCACvB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,GAAG,EAAC,uBAAuB,EAAC,CAAC,CAAC;6BACvD;iCAAI;gCACK,KAAK,GAAG,sBAAG,CAAC,IAAI,CAAC,EAAC,EAAE,EAAC,KAAK,CAAC,EAAE,EAAC,EAAC,WAAW,CAAC,CAAC;gCAClD,GAAG,CAAC,IAAI,CAAC,EAAC,KAAK,EAAC,KAAK,EAAC,CAAC,CAAC,IAAI,EAAE,CAAC;6BAClC;yBACJ;;;;;aAER,CAAC,EAAE,CAAC;IACT,CAAC,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAClB,CAAC;AAlCD,8CAkCC","sourcesContent":["import { getUserRepository } from \"../repositories/userRepository\";\nimport express = require(\"express\");\nimport * as joi from \"joi\";\nimport jwt from \"jsonwebtoken\";\n\nexport function getAuthController(){\n    process.env.AUTH_SECRET = \"testeJWT\";\n    const AUTH_SECRET = process.env.AUTH_SECRET;\n    const userRepository = getUserRepository();\n    const router = express.Router();\n\n    const userDetailsSchema = {\n        email: joi.string().email(),\n        password: joi.string()\n    };\n\n    // HTTP POST http://localhost:8080/auth/login/\n    router.post(\"/login\", (req, res)=>{\n        (async()=>{\n            const userDetails = req.body;\n            const result = joi.validate(userDetails, userDetailsSchema);\n            if(result.error){\n                res.status(400).send();\n            }else{\n                const match = await userRepository.findOne(userDetails);\n                if(match===undefined){\n                    res.status(401).send();\n                }else{\n                    if(AUTH_SECRET===undefined){\n                        res.status(500).send({Msg:\"Internal Server error\"});\n                    }else{\n                        const token = jwt.sign({id:match.id},AUTH_SECRET);\n                        res.json({token:token}).send();\n                    }\n                }\n            }\n        })();\n    });\n    return router;\n}"]}