{"version":3,"file":"/home/humberto/Documents/Superprof/Moises/Web/Project/src/backend/controllers/authController.ts","sources":["/home/humberto/Documents/Superprof/Moises/Web/Project/src/backend/controllers/authController.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iEAAmE;AACnE,iCAAoC;AACpC,uCAA2B;AAC3B,8DAA+B;AAI/B,IAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;AAE5C,IAAM,iBAAiB,GAAG;IACtB,EAAE,EAAC,GAAG,CAAC,MAAM,EAAE;CAClB,CAAC;AAEF,SAAgB,eAAe,CAAC,QAA0B;IAA1D,iBA0BC;IAxBG,IAAM,QAAQ,GAAG,UAAC,GAAoB,EAAE,GAAqB;QACzD,CAAC;;;;;wBACS,WAAW,GAAG,GAAG,CAAC,IAAI,CAAC;wBACvB,MAAM,GAAG,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,iBAAiB,CAAC,CAAC;6BACxD,MAAM,CAAC,KAAK,EAAZ,wBAAY;wBACZ,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;;4BAET,qBAAM,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,EAAA;;wBAA3C,KAAK,GAAG,SAAmC;wBACjD,IAAI,KAAK,KAAK,SAAS,EAAE;4BACrB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;yBAC1B;6BAAM;4BACH,IAAI,WAAW,KAAK,SAAS,EAAE;gCAC3B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,uBAAuB,EAAE,CAAC,CAAC;6BAC1D;iCAAM;gCACG,KAAK,GAAG,sBAAG,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,EAAE,EAAE,EAAE,WAAW,CAAC,CAAC;gCACtD,GAAG,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;6BACrC;yBACJ;;;;;aAER,CAAC,EAAE,CAAC;IACT,CAAC,CAAA;IACD,OAAO;QACH,QAAQ,EAAE,QAAQ;KACrB,CAAC;AACN,CAAC;AA1BD,0CA0BC;AAAA,CAAC;AAEF,SAAgB,iBAAiB;IAE7B,IAAM,cAAc,GAAG,kCAAiB,EAAE,CAAC;IAC3C,IAAM,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;IAEhC,IAAM,SAAS,GAAG,eAAe,CAAC,cAAc,CAAC,CAAA;IAEjD,8CAA8C;IAC9C,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAA;IAEzC,OAAO,MAAM,CAAC;AAClB,CAAC;AAXD,8CAWC","sourcesContent":["import { getUserRepository } from \"../repositories/userRepository\";\nimport express = require(\"express\");\nimport * as joi from \"joi\";\nimport jwt from \"jsonwebtoken\";\nimport { Repository } from \"typeorm\";\nimport { User } from \"../entities/user\";\n\nconst AUTH_SECRET = process.env.AUTH_SECRET;\n\nconst userDetailsSchema = {\n    id:joi.number()\n};\n\nexport function postAuthHandler(userRepo: Repository<User>) {\n\n    const postAuth = (req: express.Request, res: express.Response) => {\n        (async () => {\n            const userDetails = req.body;\n            const result = joi.validate(userDetails, userDetailsSchema);\n            if (result.error) {\n                res.status(400).send();\n            } else {\n                const match = await userRepo.findOne(userDetails);\n                if (match === undefined) {\n                    res.status(401).send();\n                } else {\n                    if (AUTH_SECRET === undefined) {\n                        res.status(500).send({ Msg: \"Internal Server error\" });\n                    } else {\n                        const token = jwt.sign({ id: match.id }, AUTH_SECRET);\n                        res.json({ token: token }).send();\n                    }\n                }\n            }\n        })();\n    }\n    return {\n        postAuth: postAuth\n    };\n};\n\nexport function getAuthController() {\n\n    const userRepository = getUserRepository();\n    const router = express.Router();\n\n    const postAuths = postAuthHandler(userRepository)\n\n    // HTTP POST http://localhost:8080/auth/login/\n    router.post(\"/login\", postAuths.postAuth)\n\n    return router;\n}"]}