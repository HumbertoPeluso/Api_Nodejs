{"version":3,"file":"/home/humberto/Documents/Superprof/Moises/Web/Project/src/backend/controllers/commentsController.ts","sources":["/home/humberto/Documents/Superprof/Moises/Web/Project/src/backend/controllers/commentsController.ts"],"names":[],"mappings":"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","sourcesContent":["import { getCommentsRepository } from \"../repositories/commentsRepository\";\nimport express = require(\"express\");\nimport * as joi from \"joi\";\nimport { authMiddleware } from \"../middleware/authMiddleware\";\nimport { Repository } from \"typeorm\";\nimport { Comments } from \"../entities/comments\";\n\n// Declare Joi Schema so we can validate movies\nconst commentsDetailsSchema = {\n    id: joi.number(),\n    user: joi.object(),\n    link: joi.object(),\n    contentComment: joi.string()\n};\n\nexport function postCommentsHandler(commentsRepo:Repository<Comments>){\n\n        const postAComment = (req:express.Request,res:express.Response)=>{\n            (async()=>{\n                const newComment = req.body;\n            const result = joi.validate(newComment, commentsDetailsSchema)\n            if(result.error){\n                res.status(400).send({msg:\"comment is not valid\"});\n            }else{\n                const comments = await commentsRepo.save(newComment);\n                res.json(comments);\n            }\n            })().catch(error => {\n                console.log('Error', error.message)\n            });\n        };\n    return{\n        postAComment:postAComment\n    };\n};\n\nexport function deleteCommentHandler(commentsRepo:Repository<Comments>){\n\n    const deleteCommentById = (req:express.Request,res:express.Response)=>{\n        (async()=>{\n            const ownerUserId = (req as any).userId;\n            const id = req.params.id;\n            const hasComment = await commentsRepo.findOne(id);\n            if(!hasComment){\n                res.status(404).send({ MSG: \"comment not found\" });\n            }else{\n                const comment = await commentsRepo.findOne({id:id, user:{id:ownerUserId}})\n                if(comment==null){\n                    res.status(400).send({msg:\"user not able to delete this comment\"})\n                }else{\n                    await commentsRepo.delete(id);\n                    res.json({ok:\"Ok\"});\n                }\n            }\n        })();\n    };\n    return{\n        deleteCommentById:deleteCommentById\n    };\n};\n\nexport function patchCommentHandler(commentsRepo:Repository<Comments>){\n\n    const updateCommentById = (req:express.Request,res:express.Response)=>{\n        (async()=>{\n            const ownerUserId = (req as any).userId;\n            const id = req.params.id;\n            const hasComment = await commentsRepo.findOne(id);\n            if(!hasComment){\n                res.status(404).send({msg:\"comment not found\"});\n            }else{\n                const comment = await commentsRepo.findOne({id:id, user:{id:ownerUserId}});\n                if(comment==null){\n                    res.status(400).send({msg:\"user not able to update this comment\"});\n                }else{\n                   \n                    await commentsRepo.update(id,{contentComment:req.body.contentComment});\n                    res.json({ok:\"Ok\"});\n                }\n\n            }\n        })().catch(error => {\n            console.log('Error', error.message)\n        });\n    };\n    return{\n        updateCommentById:updateCommentById\n    }\n};\n\nexport function getCommentsController(){\n\n    // Create a repository so we can perform database operations\n    const commentsRepository = getCommentsRepository();\n    // Create router instance so we can declare enpoints\n    const router = express.Router();\n     \n    const getComments = postCommentsHandler(commentsRepository)     \n    const deleteComments = deleteCommentHandler(commentsRepository)\n    const updateComments = patchCommentHandler(commentsRepository)\n\n    // HTTP POST http://localhost:8080/api/v1/comments\n    router.post(\"/\",authMiddleware,getComments.postAComment)\n\n    // HTTP DELETE http://localhost:8080/api/v1/comments/:id\n    router.delete(\"/:id\",authMiddleware,deleteComments.deleteCommentById)\n\n    // HTTP PATCH http://localhost:8080/api/v1/comments/:id\n    router.patch(\"/:id\",authMiddleware,updateComments.updateCommentById)\n\n    return router;\n}"]}