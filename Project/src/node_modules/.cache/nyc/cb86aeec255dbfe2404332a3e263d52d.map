{"version":3,"file":"/home/humberto/Documents/Superprof/Moises/Web/Project/src/backend/middleware/authMiddleware.ts","sources":["/home/humberto/Documents/Superprof/Moises/Web/Project/src/backend/middleware/authMiddleware.ts"],"names":[],"mappings":";;;;;AACA,8DAA+B;AAC/B,oDAAoD;AACpD,SAAgB,cAAc,CAC1B,GAAmB,EACnB,GAAoB,EACpB,IAAyB;IAEzB,kDAAkD;IAClD,IAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;IAC5C,kCAAkC;IAClC,IAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IAC1C,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACnB,oDAAoD;IACpD,IAAG,OAAO,KAAK,KAAK,QAAQ,EAAC;QACzB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;KAC1B;SAAI;QACD,iDAAiD;QACjD,IAAG,WAAW,KAAG,SAAS,EAAC;YACvB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,GAAG,EAAC,6BAA6B,EAAC,CAAC,CAAC;SAC7D;aAAI;YACD,IAAG;gBACC,gCAAgC;gBAChC,IAAM,GAAG,GAAG,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAC,WAAW,CAAQ,CAAC;gBACjD,+FAA+F;gBAC9F,GAAW,CAAC,MAAM,GAAC,GAAG,CAAC,EAAE,CAAC;gBAC3B,8BAA8B;gBAC9B,IAAI,EAAE,CAAC;aACV;YAAA,OAAM,GAAG,EAAC;gBACP,+CAA+C;gBAC/C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,GAAG,EAAC,mBAAmB,EAAC,CAAC,CAAC;aACnD;SACJ;KACJ;AACL,CAAC;AA/BD,wCA+BC","sourcesContent":["import * as express from \"express\";\nimport jwt from \"jsonwebtoken\";\n// Middleware function used for JWT token validation\nexport function authMiddleware(\n    req:express.Request,\n    res:express.Response,\n    next:express.NextFunction\n){\n    // Read token signature from environment variables\n    const AUTH_SECRET = process.env.AUTH_SECRET;\n    // Read token from request headers\n    const token = req.headers[\"x-auth-token\"];\n    console.log(token);\n    // Client error if no token found in request headers\n    if(typeof token !== \"string\"){\n        res.status(400).send();\n    }else{\n        // Server error is enironment variable is not set\n        if(AUTH_SECRET===undefined){\n            res.status(500).send({MSG:\"Server error authMiddleware\"});\n        }else{\n            try{\n                // Check that the token is valid\n                const obj = jwt.verify(token,AUTH_SECRET) as any;\n                // Add the user ID to the HTTP request object so we can access it from the NEXT request handler\n                (req as any).userId=obj.id;\n                // Invoke NEXT request handler\n                next();\n            }catch(err){\n                // Unauthorized if the token cannot be verified\n                res.status(401).send({MSG:\"Do not authorized\"});\n            }\n        }\n    }\n}"]}